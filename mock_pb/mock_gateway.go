// Code generated by MockGen. DO NOT EDIT.
// Source: ./pb/gateway.pb.go

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	gomock "github.com/golang/mock/gomock"
	pb "github.com/zeebe-io/zeebe/clients/go/pb"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockGatewayClient is a mock of GatewayClient interface
type MockGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClientMockRecorder
}

// MockGatewayClientMockRecorder is the mock recorder for MockGatewayClient
type MockGatewayClientMockRecorder struct {
	mock *MockGatewayClient
}

// NewMockGatewayClient creates a new mock instance
func NewMockGatewayClient(ctrl *gomock.Controller) *MockGatewayClient {
	mock := &MockGatewayClient{ctrl: ctrl}
	mock.recorder = &MockGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayClient) EXPECT() *MockGatewayClientMockRecorder {
	return m.recorder
}

// ActivateJobs mocks base method
func (m *MockGatewayClient) ActivateJobs(ctx context.Context, in *pb.ActivateJobsRequest, opts ...grpc.CallOption) (pb.Gateway_ActivateJobsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateJobs", varargs...)
	ret0, _ := ret[0].(pb.Gateway_ActivateJobsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateJobs indicates an expected call of ActivateJobs
func (mr *MockGatewayClientMockRecorder) ActivateJobs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateJobs", reflect.TypeOf((*MockGatewayClient)(nil).ActivateJobs), varargs...)
}

// CancelWorkflowInstance mocks base method
func (m *MockGatewayClient) CancelWorkflowInstance(ctx context.Context, in *pb.CancelWorkflowInstanceRequest, opts ...grpc.CallOption) (*pb.CancelWorkflowInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelWorkflowInstance", varargs...)
	ret0, _ := ret[0].(*pb.CancelWorkflowInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelWorkflowInstance indicates an expected call of CancelWorkflowInstance
func (mr *MockGatewayClientMockRecorder) CancelWorkflowInstance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorkflowInstance", reflect.TypeOf((*MockGatewayClient)(nil).CancelWorkflowInstance), varargs...)
}

// CompleteJob mocks base method
func (m *MockGatewayClient) CompleteJob(ctx context.Context, in *pb.CompleteJobRequest, opts ...grpc.CallOption) (*pb.CompleteJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteJob", varargs...)
	ret0, _ := ret[0].(*pb.CompleteJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteJob indicates an expected call of CompleteJob
func (mr *MockGatewayClientMockRecorder) CompleteJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteJob", reflect.TypeOf((*MockGatewayClient)(nil).CompleteJob), varargs...)
}

// CreateWorkflowInstance mocks base method
func (m *MockGatewayClient) CreateWorkflowInstance(ctx context.Context, in *pb.CreateWorkflowInstanceRequest, opts ...grpc.CallOption) (*pb.CreateWorkflowInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflowInstance", varargs...)
	ret0, _ := ret[0].(*pb.CreateWorkflowInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowInstance indicates an expected call of CreateWorkflowInstance
func (mr *MockGatewayClientMockRecorder) CreateWorkflowInstance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowInstance", reflect.TypeOf((*MockGatewayClient)(nil).CreateWorkflowInstance), varargs...)
}

// DeployWorkflow mocks base method
func (m *MockGatewayClient) DeployWorkflow(ctx context.Context, in *pb.DeployWorkflowRequest, opts ...grpc.CallOption) (*pb.DeployWorkflowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployWorkflow", varargs...)
	ret0, _ := ret[0].(*pb.DeployWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployWorkflow indicates an expected call of DeployWorkflow
func (mr *MockGatewayClientMockRecorder) DeployWorkflow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployWorkflow", reflect.TypeOf((*MockGatewayClient)(nil).DeployWorkflow), varargs...)
}

// FailJob mocks base method
func (m *MockGatewayClient) FailJob(ctx context.Context, in *pb.FailJobRequest, opts ...grpc.CallOption) (*pb.FailJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FailJob", varargs...)
	ret0, _ := ret[0].(*pb.FailJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailJob indicates an expected call of FailJob
func (mr *MockGatewayClientMockRecorder) FailJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailJob", reflect.TypeOf((*MockGatewayClient)(nil).FailJob), varargs...)
}

// GetWorkflow mocks base method
func (m *MockGatewayClient) GetWorkflow(ctx context.Context, in *pb.GetWorkflowRequest, opts ...grpc.CallOption) (*pb.GetWorkflowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflow", varargs...)
	ret0, _ := ret[0].(*pb.GetWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow
func (mr *MockGatewayClientMockRecorder) GetWorkflow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockGatewayClient)(nil).GetWorkflow), varargs...)
}

// ListWorkflows mocks base method
func (m *MockGatewayClient) ListWorkflows(ctx context.Context, in *pb.ListWorkflowsRequest, opts ...grpc.CallOption) (*pb.ListWorkflowsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflows", varargs...)
	ret0, _ := ret[0].(*pb.ListWorkflowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows
func (mr *MockGatewayClientMockRecorder) ListWorkflows(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockGatewayClient)(nil).ListWorkflows), varargs...)
}

// PublishMessage mocks base method
func (m *MockGatewayClient) PublishMessage(ctx context.Context, in *pb.PublishMessageRequest, opts ...grpc.CallOption) (*pb.PublishMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMessage", varargs...)
	ret0, _ := ret[0].(*pb.PublishMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMessage indicates an expected call of PublishMessage
func (mr *MockGatewayClientMockRecorder) PublishMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockGatewayClient)(nil).PublishMessage), varargs...)
}

// ResolveIncident mocks base method
func (m *MockGatewayClient) ResolveIncident(ctx context.Context, in *pb.ResolveIncidentRequest, opts ...grpc.CallOption) (*pb.ResolveIncidentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveIncident", varargs...)
	ret0, _ := ret[0].(*pb.ResolveIncidentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveIncident indicates an expected call of ResolveIncident
func (mr *MockGatewayClientMockRecorder) ResolveIncident(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveIncident", reflect.TypeOf((*MockGatewayClient)(nil).ResolveIncident), varargs...)
}

// Topology mocks base method
func (m *MockGatewayClient) Topology(ctx context.Context, in *pb.TopologyRequest, opts ...grpc.CallOption) (*pb.TopologyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Topology", varargs...)
	ret0, _ := ret[0].(*pb.TopologyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Topology indicates an expected call of Topology
func (mr *MockGatewayClientMockRecorder) Topology(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topology", reflect.TypeOf((*MockGatewayClient)(nil).Topology), varargs...)
}

// UpdateJobRetries mocks base method
func (m *MockGatewayClient) UpdateJobRetries(ctx context.Context, in *pb.UpdateJobRetriesRequest, opts ...grpc.CallOption) (*pb.UpdateJobRetriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobRetries", varargs...)
	ret0, _ := ret[0].(*pb.UpdateJobRetriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobRetries indicates an expected call of UpdateJobRetries
func (mr *MockGatewayClientMockRecorder) UpdateJobRetries(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobRetries", reflect.TypeOf((*MockGatewayClient)(nil).UpdateJobRetries), varargs...)
}

// SetVariables mocks base method
func (m *MockGatewayClient) SetVariables(ctx context.Context, in *pb.SetVariablesRequest, opts ...grpc.CallOption) (*pb.SetVariablesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetVariables", varargs...)
	ret0, _ := ret[0].(*pb.SetVariablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVariables indicates an expected call of SetVariables
func (mr *MockGatewayClientMockRecorder) SetVariables(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVariables", reflect.TypeOf((*MockGatewayClient)(nil).SetVariables), varargs...)
}

// MockGateway_ActivateJobsClient is a mock of Gateway_ActivateJobsClient interface
type MockGateway_ActivateJobsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGateway_ActivateJobsClientMockRecorder
}

// MockGateway_ActivateJobsClientMockRecorder is the mock recorder for MockGateway_ActivateJobsClient
type MockGateway_ActivateJobsClientMockRecorder struct {
	mock *MockGateway_ActivateJobsClient
}

// NewMockGateway_ActivateJobsClient creates a new mock instance
func NewMockGateway_ActivateJobsClient(ctrl *gomock.Controller) *MockGateway_ActivateJobsClient {
	mock := &MockGateway_ActivateJobsClient{ctrl: ctrl}
	mock.recorder = &MockGateway_ActivateJobsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGateway_ActivateJobsClient) EXPECT() *MockGateway_ActivateJobsClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockGateway_ActivateJobsClient) Recv() (*pb.ActivateJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.ActivateJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockGateway_ActivateJobsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).Recv))
}

// Header mocks base method
func (m *MockGateway_ActivateJobsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockGateway_ActivateJobsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockGateway_ActivateJobsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockGateway_ActivateJobsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockGateway_ActivateJobsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockGateway_ActivateJobsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockGateway_ActivateJobsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockGateway_ActivateJobsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockGateway_ActivateJobsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockGateway_ActivateJobsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockGateway_ActivateJobsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockGateway_ActivateJobsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).RecvMsg), m)
}

// MockGatewayServer is a mock of GatewayServer interface
type MockGatewayServer struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayServerMockRecorder
}

// MockGatewayServerMockRecorder is the mock recorder for MockGatewayServer
type MockGatewayServerMockRecorder struct {
	mock *MockGatewayServer
}

// NewMockGatewayServer creates a new mock instance
func NewMockGatewayServer(ctrl *gomock.Controller) *MockGatewayServer {
	mock := &MockGatewayServer{ctrl: ctrl}
	mock.recorder = &MockGatewayServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayServer) EXPECT() *MockGatewayServerMockRecorder {
	return m.recorder
}

// ActivateJobs mocks base method
func (m *MockGatewayServer) ActivateJobs(arg0 *pb.ActivateJobsRequest, arg1 pb.Gateway_ActivateJobsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateJobs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateJobs indicates an expected call of ActivateJobs
func (mr *MockGatewayServerMockRecorder) ActivateJobs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateJobs", reflect.TypeOf((*MockGatewayServer)(nil).ActivateJobs), arg0, arg1)
}

// CancelWorkflowInstance mocks base method
func (m *MockGatewayServer) CancelWorkflowInstance(arg0 context.Context, arg1 *pb.CancelWorkflowInstanceRequest) (*pb.CancelWorkflowInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelWorkflowInstance", arg0, arg1)
	ret0, _ := ret[0].(*pb.CancelWorkflowInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelWorkflowInstance indicates an expected call of CancelWorkflowInstance
func (mr *MockGatewayServerMockRecorder) CancelWorkflowInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorkflowInstance", reflect.TypeOf((*MockGatewayServer)(nil).CancelWorkflowInstance), arg0, arg1)
}

// CompleteJob mocks base method
func (m *MockGatewayServer) CompleteJob(arg0 context.Context, arg1 *pb.CompleteJobRequest) (*pb.CompleteJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteJob", arg0, arg1)
	ret0, _ := ret[0].(*pb.CompleteJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteJob indicates an expected call of CompleteJob
func (mr *MockGatewayServerMockRecorder) CompleteJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteJob", reflect.TypeOf((*MockGatewayServer)(nil).CompleteJob), arg0, arg1)
}

// CreateWorkflowInstance mocks base method
func (m *MockGatewayServer) CreateWorkflowInstance(arg0 context.Context, arg1 *pb.CreateWorkflowInstanceRequest) (*pb.CreateWorkflowInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowInstance", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateWorkflowInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowInstance indicates an expected call of CreateWorkflowInstance
func (mr *MockGatewayServerMockRecorder) CreateWorkflowInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowInstance", reflect.TypeOf((*MockGatewayServer)(nil).CreateWorkflowInstance), arg0, arg1)
}

// DeployWorkflow mocks base method
func (m *MockGatewayServer) DeployWorkflow(arg0 context.Context, arg1 *pb.DeployWorkflowRequest) (*pb.DeployWorkflowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeployWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployWorkflow indicates an expected call of DeployWorkflow
func (mr *MockGatewayServerMockRecorder) DeployWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployWorkflow", reflect.TypeOf((*MockGatewayServer)(nil).DeployWorkflow), arg0, arg1)
}

// FailJob mocks base method
func (m *MockGatewayServer) FailJob(arg0 context.Context, arg1 *pb.FailJobRequest) (*pb.FailJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailJob", arg0, arg1)
	ret0, _ := ret[0].(*pb.FailJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailJob indicates an expected call of FailJob
func (mr *MockGatewayServerMockRecorder) FailJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailJob", reflect.TypeOf((*MockGatewayServer)(nil).FailJob), arg0, arg1)
}

// GetWorkflow mocks base method
func (m *MockGatewayServer) GetWorkflow(arg0 context.Context, arg1 *pb.GetWorkflowRequest) (*pb.GetWorkflowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow
func (mr *MockGatewayServerMockRecorder) GetWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockGatewayServer)(nil).GetWorkflow), arg0, arg1)
}

// ListWorkflows mocks base method
func (m *MockGatewayServer) ListWorkflows(arg0 context.Context, arg1 *pb.ListWorkflowsRequest) (*pb.ListWorkflowsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListWorkflowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows
func (mr *MockGatewayServerMockRecorder) ListWorkflows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockGatewayServer)(nil).ListWorkflows), arg0, arg1)
}

// PublishMessage mocks base method
func (m *MockGatewayServer) PublishMessage(arg0 context.Context, arg1 *pb.PublishMessageRequest) (*pb.PublishMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", arg0, arg1)
	ret0, _ := ret[0].(*pb.PublishMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMessage indicates an expected call of PublishMessage
func (mr *MockGatewayServerMockRecorder) PublishMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockGatewayServer)(nil).PublishMessage), arg0, arg1)
}

// ResolveIncident mocks base method
func (m *MockGatewayServer) ResolveIncident(arg0 context.Context, arg1 *pb.ResolveIncidentRequest) (*pb.ResolveIncidentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveIncident", arg0, arg1)
	ret0, _ := ret[0].(*pb.ResolveIncidentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveIncident indicates an expected call of ResolveIncident
func (mr *MockGatewayServerMockRecorder) ResolveIncident(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveIncident", reflect.TypeOf((*MockGatewayServer)(nil).ResolveIncident), arg0, arg1)
}

// Topology mocks base method
func (m *MockGatewayServer) Topology(arg0 context.Context, arg1 *pb.TopologyRequest) (*pb.TopologyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topology", arg0, arg1)
	ret0, _ := ret[0].(*pb.TopologyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Topology indicates an expected call of Topology
func (mr *MockGatewayServerMockRecorder) Topology(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topology", reflect.TypeOf((*MockGatewayServer)(nil).Topology), arg0, arg1)
}

// UpdateJobRetries mocks base method
func (m *MockGatewayServer) UpdateJobRetries(arg0 context.Context, arg1 *pb.UpdateJobRetriesRequest) (*pb.UpdateJobRetriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobRetries", arg0, arg1)
	ret0, _ := ret[0].(*pb.UpdateJobRetriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobRetries indicates an expected call of UpdateJobRetries
func (mr *MockGatewayServerMockRecorder) UpdateJobRetries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobRetries", reflect.TypeOf((*MockGatewayServer)(nil).UpdateJobRetries), arg0, arg1)
}

// SetVariables mocks base method
func (m *MockGatewayServer) SetVariables(arg0 context.Context, arg1 *pb.SetVariablesRequest) (*pb.SetVariablesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVariables", arg0, arg1)
	ret0, _ := ret[0].(*pb.SetVariablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVariables indicates an expected call of SetVariables
func (mr *MockGatewayServerMockRecorder) SetVariables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVariables", reflect.TypeOf((*MockGatewayServer)(nil).SetVariables), arg0, arg1)
}

// MockGateway_ActivateJobsServer is a mock of Gateway_ActivateJobsServer interface
type MockGateway_ActivateJobsServer struct {
	ctrl     *gomock.Controller
	recorder *MockGateway_ActivateJobsServerMockRecorder
}

// MockGateway_ActivateJobsServerMockRecorder is the mock recorder for MockGateway_ActivateJobsServer
type MockGateway_ActivateJobsServerMockRecorder struct {
	mock *MockGateway_ActivateJobsServer
}

// NewMockGateway_ActivateJobsServer creates a new mock instance
func NewMockGateway_ActivateJobsServer(ctrl *gomock.Controller) *MockGateway_ActivateJobsServer {
	mock := &MockGateway_ActivateJobsServer{ctrl: ctrl}
	mock.recorder = &MockGateway_ActivateJobsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGateway_ActivateJobsServer) EXPECT() *MockGateway_ActivateJobsServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockGateway_ActivateJobsServer) Send(arg0 *pb.ActivateJobsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockGateway_ActivateJobsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockGateway_ActivateJobsServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockGateway_ActivateJobsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockGateway_ActivateJobsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockGateway_ActivateJobsServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockGateway_ActivateJobsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockGateway_ActivateJobsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockGateway_ActivateJobsServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockGateway_ActivateJobsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockGateway_ActivateJobsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockGateway_ActivateJobsServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockGateway_ActivateJobsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockGateway_ActivateJobsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGateway_ActivateJobsServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockGateway_ActivateJobsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockGateway_ActivateJobsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGateway_ActivateJobsServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockGateway_ActivateJobsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockGateway_ActivateJobsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGateway_ActivateJobsServer)(nil).RecvMsg), m)
}
