// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/camunda-cloud/zeebe/clients/go/pkg/pb (interfaces: GatewayClient,Gateway_ActivateJobsClient)

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	pb "github.com/camunda-cloud/zeebe/clients/go/pkg/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockGatewayClient is a mock of GatewayClient interface
type MockGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClientMockRecorder
}

// MockGatewayClientMockRecorder is the mock recorder for MockGatewayClient
type MockGatewayClientMockRecorder struct {
	mock *MockGatewayClient
}

// NewMockGatewayClient creates a new mock instance
func NewMockGatewayClient(ctrl *gomock.Controller) *MockGatewayClient {
	mock := &MockGatewayClient{ctrl: ctrl}
	mock.recorder = &MockGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayClient) EXPECT() *MockGatewayClientMockRecorder {
	return m.recorder
}

// ActivateJobs mocks base method
func (m *MockGatewayClient) ActivateJobs(arg0 context.Context, arg1 *pb.ActivateJobsRequest, arg2 ...grpc.CallOption) (pb.Gateway_ActivateJobsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateJobs", varargs...)
	ret0, _ := ret[0].(pb.Gateway_ActivateJobsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateJobs indicates an expected call of ActivateJobs
func (mr *MockGatewayClientMockRecorder) ActivateJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateJobs", reflect.TypeOf((*MockGatewayClient)(nil).ActivateJobs), varargs...)
}

// CancelWorkflowInstance mocks base method
func (m *MockGatewayClient) CancelWorkflowInstance(arg0 context.Context, arg1 *pb.CancelWorkflowInstanceRequest, arg2 ...grpc.CallOption) (*pb.CancelWorkflowInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelWorkflowInstance", varargs...)
	ret0, _ := ret[0].(*pb.CancelWorkflowInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelWorkflowInstance indicates an expected call of CancelWorkflowInstance
func (mr *MockGatewayClientMockRecorder) CancelWorkflowInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorkflowInstance", reflect.TypeOf((*MockGatewayClient)(nil).CancelWorkflowInstance), varargs...)
}

// CompleteJob mocks base method
func (m *MockGatewayClient) CompleteJob(arg0 context.Context, arg1 *pb.CompleteJobRequest, arg2 ...grpc.CallOption) (*pb.CompleteJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteJob", varargs...)
	ret0, _ := ret[0].(*pb.CompleteJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteJob indicates an expected call of CompleteJob
func (mr *MockGatewayClientMockRecorder) CompleteJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteJob", reflect.TypeOf((*MockGatewayClient)(nil).CompleteJob), varargs...)
}

// CreateWorkflowInstance mocks base method
func (m *MockGatewayClient) CreateWorkflowInstance(arg0 context.Context, arg1 *pb.CreateWorkflowInstanceRequest, arg2 ...grpc.CallOption) (*pb.CreateWorkflowInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflowInstance", varargs...)
	ret0, _ := ret[0].(*pb.CreateWorkflowInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowInstance indicates an expected call of CreateWorkflowInstance
func (mr *MockGatewayClientMockRecorder) CreateWorkflowInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowInstance", reflect.TypeOf((*MockGatewayClient)(nil).CreateWorkflowInstance), varargs...)
}

// CreateWorkflowInstanceWithResult mocks base method
func (m *MockGatewayClient) CreateWorkflowInstanceWithResult(arg0 context.Context, arg1 *pb.CreateWorkflowInstanceWithResultRequest, arg2 ...grpc.CallOption) (*pb.CreateWorkflowInstanceWithResultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflowInstanceWithResult", varargs...)
	ret0, _ := ret[0].(*pb.CreateWorkflowInstanceWithResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowInstanceWithResult indicates an expected call of CreateWorkflowInstanceWithResult
func (mr *MockGatewayClientMockRecorder) CreateWorkflowInstanceWithResult(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowInstanceWithResult", reflect.TypeOf((*MockGatewayClient)(nil).CreateWorkflowInstanceWithResult), varargs...)
}

// DeployWorkflow mocks base method
func (m *MockGatewayClient) DeployWorkflow(arg0 context.Context, arg1 *pb.DeployWorkflowRequest, arg2 ...grpc.CallOption) (*pb.DeployWorkflowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployWorkflow", varargs...)
	ret0, _ := ret[0].(*pb.DeployWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployWorkflow indicates an expected call of DeployWorkflow
func (mr *MockGatewayClientMockRecorder) DeployWorkflow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployWorkflow", reflect.TypeOf((*MockGatewayClient)(nil).DeployWorkflow), varargs...)
}

// FailJob mocks base method
func (m *MockGatewayClient) FailJob(arg0 context.Context, arg1 *pb.FailJobRequest, arg2 ...grpc.CallOption) (*pb.FailJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FailJob", varargs...)
	ret0, _ := ret[0].(*pb.FailJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailJob indicates an expected call of FailJob
func (mr *MockGatewayClientMockRecorder) FailJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailJob", reflect.TypeOf((*MockGatewayClient)(nil).FailJob), varargs...)
}

// PublishMessage mocks base method
func (m *MockGatewayClient) PublishMessage(arg0 context.Context, arg1 *pb.PublishMessageRequest, arg2 ...grpc.CallOption) (*pb.PublishMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMessage", varargs...)
	ret0, _ := ret[0].(*pb.PublishMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMessage indicates an expected call of PublishMessage
func (mr *MockGatewayClientMockRecorder) PublishMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockGatewayClient)(nil).PublishMessage), varargs...)
}

// ResolveIncident mocks base method
func (m *MockGatewayClient) ResolveIncident(arg0 context.Context, arg1 *pb.ResolveIncidentRequest, arg2 ...grpc.CallOption) (*pb.ResolveIncidentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveIncident", varargs...)
	ret0, _ := ret[0].(*pb.ResolveIncidentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveIncident indicates an expected call of ResolveIncident
func (mr *MockGatewayClientMockRecorder) ResolveIncident(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveIncident", reflect.TypeOf((*MockGatewayClient)(nil).ResolveIncident), varargs...)
}

// SetVariables mocks base method
func (m *MockGatewayClient) SetVariables(arg0 context.Context, arg1 *pb.SetVariablesRequest, arg2 ...grpc.CallOption) (*pb.SetVariablesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetVariables", varargs...)
	ret0, _ := ret[0].(*pb.SetVariablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVariables indicates an expected call of SetVariables
func (mr *MockGatewayClientMockRecorder) SetVariables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVariables", reflect.TypeOf((*MockGatewayClient)(nil).SetVariables), varargs...)
}

// ThrowError mocks base method
func (m *MockGatewayClient) ThrowError(arg0 context.Context, arg1 *pb.ThrowErrorRequest, arg2 ...grpc.CallOption) (*pb.ThrowErrorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThrowError", varargs...)
	ret0, _ := ret[0].(*pb.ThrowErrorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThrowError indicates an expected call of ThrowError
func (mr *MockGatewayClientMockRecorder) ThrowError(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThrowError", reflect.TypeOf((*MockGatewayClient)(nil).ThrowError), varargs...)
}

// Topology mocks base method
func (m *MockGatewayClient) Topology(arg0 context.Context, arg1 *pb.TopologyRequest, arg2 ...grpc.CallOption) (*pb.TopologyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Topology", varargs...)
	ret0, _ := ret[0].(*pb.TopologyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Topology indicates an expected call of Topology
func (mr *MockGatewayClientMockRecorder) Topology(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topology", reflect.TypeOf((*MockGatewayClient)(nil).Topology), varargs...)
}

// UpdateJobRetries mocks base method
func (m *MockGatewayClient) UpdateJobRetries(arg0 context.Context, arg1 *pb.UpdateJobRetriesRequest, arg2 ...grpc.CallOption) (*pb.UpdateJobRetriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobRetries", varargs...)
	ret0, _ := ret[0].(*pb.UpdateJobRetriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobRetries indicates an expected call of UpdateJobRetries
func (mr *MockGatewayClientMockRecorder) UpdateJobRetries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobRetries", reflect.TypeOf((*MockGatewayClient)(nil).UpdateJobRetries), varargs...)
}

// MockGateway_ActivateJobsClient is a mock of Gateway_ActivateJobsClient interface
type MockGateway_ActivateJobsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGateway_ActivateJobsClientMockRecorder
}

// MockGateway_ActivateJobsClientMockRecorder is the mock recorder for MockGateway_ActivateJobsClient
type MockGateway_ActivateJobsClientMockRecorder struct {
	mock *MockGateway_ActivateJobsClient
}

// NewMockGateway_ActivateJobsClient creates a new mock instance
func NewMockGateway_ActivateJobsClient(ctrl *gomock.Controller) *MockGateway_ActivateJobsClient {
	mock := &MockGateway_ActivateJobsClient{ctrl: ctrl}
	mock.recorder = &MockGateway_ActivateJobsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGateway_ActivateJobsClient) EXPECT() *MockGateway_ActivateJobsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockGateway_ActivateJobsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockGateway_ActivateJobsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockGateway_ActivateJobsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockGateway_ActivateJobsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).Context))
}

// Header mocks base method
func (m *MockGateway_ActivateJobsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockGateway_ActivateJobsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).Header))
}

// Recv mocks base method
func (m *MockGateway_ActivateJobsClient) Recv() (*pb.ActivateJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.ActivateJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockGateway_ActivateJobsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockGateway_ActivateJobsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockGateway_ActivateJobsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockGateway_ActivateJobsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockGateway_ActivateJobsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockGateway_ActivateJobsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockGateway_ActivateJobsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockGateway_ActivateJobsClient)(nil).Trailer))
}
